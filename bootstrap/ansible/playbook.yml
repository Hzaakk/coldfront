---
- hosts:
    - all
    - "{{ domain }}"
  become : true
  become_user: root
  become_method: sudo

  vars:
   cwd: "{{ lookup('env','PWD') }}"

  vars_files:
    - "{{ cwd }}/main.yml"

  tasks:
    - name: Install redis
      yum:
        name:
          - redis
        state: present

    - name: Set redis password
      lineinfile:
        path: /etc/redis.conf
        regexp: '^requirepass '
        insertafter: '^# requirepass foobared'
        line: 'requirepass {{ redis_passwd }}'

    - name: Restart and enable Redis service
      service:
        name: redis
        state: restarted
        enabled: yes

    - name: Install Supervisor
      yum:
        name:
          - supervisor
        state: present

    # ini_file is included in community.general.
    - name: Set django_q command in supervisord.conf
      ini_file:
        path: /etc/supervisord.conf
        section: 'program:django_q'
        option: 'command'
        value: '{{ git_prefix }}/venv/bin/python3 {{ git_prefix }}/{{ reponame }}/manage.py qcluster'

    - name: Set django_q stopasgroup in supervisord.conf
      ini_file:
        path: /etc/supervisord.conf
        section: 'program:django_q'
        option: 'stopasgroup'
        value: 'true'

    - name: Set django_q numprocs in supervisord.conf
      ini_file:
        path: /etc/supervisord.conf
        section: 'program:django_q'
        option: 'numprocs'
        value: '1'

    - name: Restart and enable Supervisor
      service:
        name: supervisord
        state: restarted
        enabled: yes

    - name: Install Postgresql repo
      yum:
        name: https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
        state: present

    - name: Install Postgresql Packages
      yum:
        name: [ 'postgresql96', 'postgresql96-server', 'postgresql96-devel' ]
        state: present

    - name: Create a folder for keeping Django app logs
      file:
       path: '{{ log_path }}'
       state: directory
       mode: 0775
       owner: '{{ djangooperator }}'
       group: 'apache'

    - name: Create portal Django app log files
      file:
       path: '{{ log_path }}/{{ portal_log_file }}'
       state: touch
       mode: 0660
       owner: '{{ djangooperator }}'
       group: 'apache'

    - name: Create API Django app log files
      file:
       path: '{{ log_path }}/{{ api_log_file }}'
       state: touch
       mode: 0660
       owner: '{{ djangooperator }}'
       group: 'apache'

    - name: Install Django application dependencies
      pip:
        requirements: '{{ git_prefix }}/{{ reponame }}/requirements.txt'
        executable: '{{ git_prefix }}/venv/bin/pip3'
      become_user: "{{ djangooperator }}"

    - name: Check if PostgreSQL database is initialized
      stat:
        path: /var/lib/pgsql/9.6/data/PG_VERSION
      register: pgdata_dir_version

    - name: Initialize Postgres if not already initialized
      command: /usr/pgsql-9.6/bin/postgresql96-setup initdb
      when: not pgdata_dir_version.stat.exists

    - name: enabling postgresql services
      service:
        name: postgresql-9.6
        state: started
        enabled: yes

    - name: Update pg_hba.conf to change host auth from ident to md5 (1/2)
      postgresql_pg_hba:
        dest: /var/lib/pgsql/9.6/data/pg_hba.conf
        backup: yes
        method: md5
        contype: host
        source: ::1

    - name: Update pg_hba.conf to change host auth from ident to md5 (2/2)
      postgresql_pg_hba:
        dest: /var/lib/pgsql/9.6/data/pg_hba.conf
        backup: yes
        method: md5
        contype: host
        source: 127.0.0.1/32

    - name: Update pg_hba.conf to set authentication for all to md5
      postgresql_pg_hba:
        dest: /var/lib/pgsql/9.6/data/pg_hba.conf
        backup: yes
        method: md5
        contype: host
        source: '0.0.0.0/0'

    - name: Restart PostgreSQL
      service: name=postgresql-9.6 state=restarted

    - name: Create New DB in postgres
      postgresql_db:
        name: '{{ db_name }}'
      become_user: postgres
      vars:
        ansible_python_interpreter: '{{ git_prefix}}/venv/bin/python3'

    - name: Create admin user and grant permissions
      postgresql_user:
        db: '{{ db_name }}'
        priv: ALL
        name: '{{ db_admin_user }}'
        password: '{{ db_admin_passwd }}'
        role_attr_flags: CREATEDB
      become_user: postgres
      vars:
        ansible_python_interpreter: '{{ git_prefix}}/venv/bin/python3'

    - name: Copy the ColdFront local_settings.py file from the sample
      ansible.builtin.copy:
        src: '{{ git_prefix }}/{{ reponame }}/coldfront/config/local_settings.py.sample'
        dest: '{{ git_prefix }}/{{ reponame }}/coldfront/config/local_settings.py'

    - name: Copy the ColdFront local_strings.py file from the sample
      ansible.builtin.copy:
        src: '{{ git_prefix }}/{{ reponame }}/coldfront/config/local_strings.py.sample'
        dest: '{{ git_prefix }}/{{ reponame }}/coldfront/config/local_strings.py'

    - name: Create the deployment-specific _settings.py file from a template
      template: src={{ git_prefix }}/{{ reponame }}/bootstrap/ansible/settings_template.tmpl
                dest={{ git_prefix }}/{{ reponame }}/{{ djangoprojname }}/config/{{ deployment }}_settings.py
      become_user: "{{ djangooperator }}"

    - name: Create the deployment-specific password reset email subject text file from a template
      template: src={{ git_prefix }}/{{ reponame }}/bootstrap/ansible/password_reset_subject_template.tmpl
                dest={{ git_prefix }}/{{ reponame }}/{{ djangoprojname }}/core/user/templates/user/passwords/password_reset_subject.txt
      become_user: "{{ djangooperator }}"

    - name: Run Django management command - initial_setup
      django_manage:
        command: initial_setup
        app_path: "{{ git_prefix }}/{{ reponame }}"
        settings: "config.settings"
        pythonpath: "{{ git_prefix }}/{{ reponame }}/{{ djangoprojname }}"
        virtualenv: "{{ git_prefix }}/venv"
      become_user: "{{ djangooperator }}"

    - name: Run Django management command - migrate
      django_manage:
        command: migrate
        app_path: "{{ git_prefix }}/{{ reponame }}"
        settings: "config.settings"
        pythonpath: "{{ git_prefix }}/{{ reponame }}/{{ djangoprojname }}"
        virtualenv: "{{ git_prefix }}/venv"
      become_user: "{{ djangooperator }}"

    - name: Run Django management command - add_accounting_defaults
      django_manage:
        command: add_accounting_defaults
        app_path: "{{ git_prefix }}/{{ reponame }}"
        settings: "config.settings"
        pythonpath: "{{ git_prefix }}/{{ reponame }}/{{ djangoprojname }}"
        virtualenv: "{{ git_prefix }}/venv"
      become_user: "{{ djangooperator }}"

    - name: Run Django management command - add_allowance_defaults
      django_manage:
        command: add_allowance_defaults
        app_path: "{{ git_prefix }}/{{ reponame }}"
        settings: "config.settings"
        pythonpath: "{{ git_prefix }}/{{ reponame }}/{{ djangoprojname }}"
        virtualenv: "{{ git_prefix }}/venv"
      become_user: "{{ djangooperator }}"

    - name: Run Django management command - add_directory_defaults
      django_manage:
        command: add_directory_defaults
        app_path: "{{ git_prefix }}/{{ reponame }}"
        settings: "config.settings"
        pythonpath: "{{ git_prefix }}/{{ reponame }}/{{ djangoprojname }}"
        virtualenv: "{{ git_prefix }}/venv"
      become_user: "{{ djangooperator }}"

    - name: Run Django management command - create_allocation_periods
      django_manage:
        command: create_allocation_periods
        app_path: "{{ git_prefix }}/{{ reponame }}"
        settings: "config.settings"
        pythonpath: "{{ git_prefix }}/{{ reponame }}/{{ djangoprojname }}"
        virtualenv: "{{ git_prefix }}/venv"
      become_user: "{{ djangooperator }}"

    - name: Run Django management command - create_staff_group
      django_manage:
        command: create_staff_group
        app_path: "{{ git_prefix }}/{{ reponame }}"
        settings: "config.settings"
        pythonpath: "{{ git_prefix }}/{{ reponame }}/{{ djangoprojname }}"
        virtualenv: "{{ git_prefix }}/venv"
      become_user: "{{ djangooperator }}"

    - name: Run Django management command - collectstatic
      django_manage:
        command: collectstatic --noinput
        app_path: "{{ git_prefix }}/{{ reponame }}"
        settings: "config.settings"
        pythonpath: "{{ git_prefix }}/{{ reponame }}/{{ djangoprojname }}"
        virtualenv: "{{ git_prefix }}/venv"
      become_user: "{{ djangooperator }}"

    - name: Grant read for Apache on djangooperator's $HOME
      file:
        path: '{{ git_prefix }}'
        state: directory
        mode: 0755
        group: apache

    - name: Grant read permissions to Apache on git root
      file:
        path: '{{ git_prefix }}/{{ reponame }}'
        state: directory
        recurse: yes
        mode: 0755
        group: apache

    - name: Create a wsgi conf file from a template without SSL
      template: src={{ git_prefix }}/{{ reponame }}/bootstrap/ansible/wsgi_conf.tmpl
                dest=/etc/httpd/conf.d/{{ wsgi_conf_file_name }}
      when: not ssl_enabled

    - name: Create a wsgi conf file from a template with SSL
      template: src={{ git_prefix }}/{{ reponame }}/bootstrap/ansible/wsgi_conf_ssl.tmpl
                dest=/etc/httpd/conf.d/{{ wsgi_conf_file_name }}
      when: ssl_enabled

    - name: Restart Apache
      service: name=httpd state=restarted enabled=yes

    # supervisorctl is included in community.general.
    - name: Ensure that a Supervisor worker is running a django_q cluster
      supervisorctl:
        name: 'django_q'
        state: started

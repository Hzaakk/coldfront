name: Django CI

on:
  schedule:
    - cron: '0 10 * * *' # 10 AM UTC = 3 AM PST
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master", "develop" ]

jobs:
  build:
  
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:9.6.24
        env:
          POSTGRES_DB: cf_brc_db
          POSTGRES_PASSWORD: test
          POSTGRES_PORT: 5432
          POSTGRES_USER: test
        ports:
        - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.6.8
      uses: actions/setup-python@v3
      with:
        python-version: 3.6.8
    
    - name: Get apache2-dev version
      run: |
        apt-cache show apache2-dev > apache2-dev-version
        sudo chmod a+rwx /usr/{bin,include,share}/
    
    - name: Cache apache2-dev
      id: cache-apache2-dev
      uses: actions/cache@v3
      with:
        path: |
          /usr/bin/apxs
          /usr/bin/apxs2
          /usr/bin/dh_apache2
          /usr/include/apache2/
          /usr/share/apache2/
          /usr/share/debhelper/autoscripts/postinst-apache2
          /usr/share/debhelper/autoscripts/postrm-apache2
          /usr/share/debhelper/autoscripts/prerm-apache2
          /usr/share/doc/apache2-dev
          /usr/share/man/man1/apxs.1.gz
          /usr/share/man/man1/apxs2.1.gz
          /usr/share/man/man1/dh_apache2.1.gz
          /usr/share/perl5/Debian/Debhelper/Sequence/apache2.pm
        key: ${{ runner.os }}-apache2-dev-files-${{ hashFiles('apache2-dev-version') }}

    - name: Cache Python packages
      id: cache-python
      uses: actions/cache@v3
      with:
        path: ~/venv
        key: ${{ runner.os }}-python-packages-${{ hashFiles('requirements.txt') }}

    - if: ${{ steps.cache-python.outputs.cache-hit != 'true' }}
      name: Install Python packages
      run: |
        python3.6 -m venv ~/venv
        source ~/venv/bin/activate
        pip install -r requirements.txt
        
    - if: ${{ steps.cache-apache2-dev.outputs.cache-hit != 'true' }}
      name: Install apache2-dev
      run: |
        sudo apt -y install apache2-dev
        
    - name: Create Settings Files From Samples And Create Log Files
      run: |
        sudo mkdir -p /var/log/user_portals/cf_mybrc
        sudo chmod 775 /var/log/user_portals/cf_mybrc
        
        sudo touch /var/log/user_portals/cf_mybrc/cf_mybrc_portal.log
        sudo chmod 666 /var/log/user_portals/cf_mybrc/cf_mybrc_portal.log
        
        sudo touch /var/log/user_portals/cf_mybrc/cf_mybrc_api.log
        sudo chmod 666 /var/log/user_portals/cf_mybrc/cf_mybrc_api.log
        
        sudo chown -R :www-data /var/log/user_portals/cf_mybrc

        cp coldfront/config/local_strings.py.sample coldfront/config/local_strings.py
        cp coldfront/config/local_settings.py.sample coldfront/config/local_settings.py
        cp coldfront/config/test_settings.py.sample coldfront/config/test_settings.py

        sudo chmod a+rwx /usr/{include,share}/apache2
        
    - name: Run Tests
      run: |
        source ~/venv/bin/activate
        python manage.py migrate
        python manage.py test coldfront.core.utils.tests.test_export_data
